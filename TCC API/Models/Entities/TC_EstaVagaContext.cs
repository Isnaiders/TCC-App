// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TCC_API.Models.Entities
{
    public partial class TC_EstaVagaContext : DbContext
    {
        public TC_EstaVagaContext()
        {
        }

        public TC_EstaVagaContext(DbContextOptions<TC_EstaVagaContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Authentication> Authentication { get; set; }
        public virtual DbSet<Car> Car { get; set; }
        public virtual DbSet<Parking> Parking { get; set; }
        public virtual DbSet<ParkingOpeningHour> ParkingOpeningHour { get; set; }
        public virtual DbSet<ParkingReservation> ParkingReservation { get; set; }
        public virtual DbSet<ParkingReservationHistory> ParkingReservationHistory { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Vacancy> Vacancy { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Authentication>(entity =>
            {
                entity.Property(e => e.AuthenticationId).ValueGeneratedNever();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Authentication)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Authentication_dbo.User_UserId");
            });

            modelBuilder.Entity<Car>(entity =>
            {
                entity.Property(e => e.CarId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Parking>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<ParkingOpeningHour>(entity =>
            {
                entity.Property(e => e.ParkingOpeningHourId).ValueGeneratedNever();

                entity.HasOne(d => d.Parking)
                    .WithMany(p => p.ParkingOpeningHour)
                    .HasForeignKey(d => d.ParkingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.ParkingOpeningHour_dbo.Parking_ParkingId");
            });

            modelBuilder.Entity<ParkingReservation>(entity =>
            {
                entity.Property(e => e.ParkingReservationId).ValueGeneratedNever();

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.ParkingReservation)
                    .HasForeignKey(d => d.CarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.ParkingReservation_dbo.Car_CarId");

                entity.HasOne(d => d.Parking)
                    .WithMany(p => p.ParkingReservation)
                    .HasForeignKey(d => d.ParkingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.ParkingReservation_dbo.Parking_ParkingId");

                entity.HasOne(d => d.Vacancy)
                    .WithMany(p => p.ParkingReservation)
                    .HasForeignKey(d => d.VacancyId)
                    .HasConstraintName("FK_dbo.ParkingReservation_dbo.Vacancy_VacancyId");
            });

            modelBuilder.Entity<ParkingReservationHistory>(entity =>
            {
                entity.Property(e => e.ParkingReservationHistoryId).ValueGeneratedNever();

                entity.HasOne(d => d.Car)
                    .WithMany(p => p.ParkingReservationHistory)
                    .HasForeignKey(d => d.CarId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.ParkingReservationHistory_dbo.Car_CarId");

                entity.HasOne(d => d.Parking)
                    .WithMany(p => p.ParkingReservationHistory)
                    .HasForeignKey(d => d.ParkingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.ParkingReservationHistory_dbo.Parking_ParkingId");

                entity.HasOne(d => d.Vacancy)
                    .WithMany(p => p.ParkingReservationHistory)
                    .HasForeignKey(d => d.VacancyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.ParkingReservationHistory_dbo.Vacancy_VacancyId");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Vacancy>(entity =>
            {
                entity.Property(e => e.VacancyId).ValueGeneratedNever();

                entity.HasOne(d => d.Parking)
                    .WithMany(p => p.Vacancy)
                    .HasForeignKey(d => d.ParkingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo.Vacancy_dbo.Parking_ParkingId");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}